// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Product {
  id               String   @id @default(cuid())
  name             String
  category         String
  unit             String
  currentStock     Float
  minStockLevel    Float
  maxStockLevel    Float
  avgPurchasePrice Float
  avgSellingPrice  Float
  perishable       Boolean  @default(false)
  shelfLife        Int?     // in days
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  stockEntries StockEntry[]
  saleItems    SaleItem[]
  purchaseItems PurchaseItem[]
  stockLocations StockLocation[]

  @@map("products")
}

model StockLocation {
  id                String  @id @default(cuid())
  productId         String
  locationName      String
  quantity          Float
  reservedQuantity  Float   @default(0)
  availableQuantity Float

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("stock_locations")
}

model StockEntry {
  id            String    @id @default(cuid())
  productId     String
  lotNumber     String
  supplierId    String
  quantity      Float
  purchasePrice Float
  entryDate     DateTime  @default(now())
  expiryDate    DateTime?
  quality       Quality   @default(A)
  location      String
  vehicleNumber String?
  notes         String?

  // Relations
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("stock_entries")
}

model Customer {
  id                String       @id @default(cuid())
  name              String
  phone             String       @unique
  email             String?
  address           String
  gstNumber         String?
  creditLimit       Float        @default(0)
  outstandingAmount Float        @default(0)
  paymentTerms      Int          @default(30) // days
  category          CustomerType @default(RETAIL)
  totalOrders       Int          @default(0)
  lastOrderDate     DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  sales Sale[]

  @@map("customers")
}

model Supplier {
  id                  String   @id @default(cuid())
  name                String
  phone               String   @unique
  location            String
  productsSupplied    String[] // Array of product names
  rating              Float    @default(0)
  paymentTerms        Int      @default(30)
  outstandingPayments Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  stockEntries StockEntry[]
  purchases    Purchase[]

  @@map("suppliers")
}

model Sale {
  id             String        @id @default(cuid())
  customerId     String
  billNumber     String        @unique
  totalAmount    Float
  taxAmount      Float         @default(0)
  discountAmount Float         @default(0)
  paymentMethod  PaymentMethod @default(CASH)
  paymentStatus  PaymentStatus @default(PENDING)
  saleDate       DateTime      @default(now())
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  customer Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items    SaleItem[]

  @@map("sales")
}

model SaleItem {
  id          String  @id @default(cuid())
  saleId      String
  productId   String
  productName String
  quantity    Float
  unit        String
  rate        Float
  amount      Float
  discount    Float?  @default(0)
  taxRate     Float?  @default(0)

  // Relations
  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}

model Purchase {
  id            String          @id @default(cuid())
  supplierId    String
  billNumber    String          @unique
  totalAmount   Float
  taxAmount     Float           @default(0)
  purchaseDate  DateTime        @default(now())
  vehicleNumber String?
  status        PurchaseStatus  @default(PENDING)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  supplier Supplier       @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  items    PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id          String  @id @default(cuid())
  purchaseId  String
  productId   String
  productName String
  quantity    Float
  unit        String
  rate        Float
  amount      Float
  lotNumber   String
  quality     Quality @default(A)

  // Relations
  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("purchase_items")
}

model AIInsight {
  id          String      @id @default(cuid())
  type        InsightType
  title       String
  description String
  confidence  Float
  impact      ImpactLevel
  timeframe   String
  action      String?
  category    String
  status      InsightStatus @default(NEW)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("ai_insights")
}

model CrateTracking {
  id             String       @id @default(cuid())
  crateType      String
  totalCrates    Int
  availableCrates Int
  issuedCrates   Int
  customerId     String?
  issueDate      DateTime?
  returnDate     DateTime?
  condition      CrateCondition @default(GOOD)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("crate_tracking")
}

model WeightEntry {
  id          String   @id @default(cuid())
  productId   String
  grossWeight Float
  tareWeight  Float
  netWeight   Float
  scaleName   String
  operator    String
  timestamp   DateTime @default(now())

  @@map("weight_entries")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
}

enum CustomerType {
  RETAIL
  WHOLESALE
  HOTEL
  RESTAURANT
}

enum PaymentMethod {
  CASH
  CREDIT
  UPI
  CHEQUE
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  PARTIAL
}

enum Quality {
  A
  B
  C
}

enum InsightType {
  PREDICTION
  ALERT
  RECOMMENDATION
  OPTIMIZATION
}

enum ImpactLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InsightStatus {
  NEW
  ACKNOWLEDGED
  ACTED
  DISMISSED
}

enum CrateCondition {
  GOOD
  DAMAGED
  LOST
}
